schema
@core(feature: "https://specs.apollo.dev/core/v0.2"),
@core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Customer
@join__owner(graph: CUSTOMERS)
@join__type(graph: CUSTOMERS, key: "id")
@join__type(graph: WORKORDERS, key: "id")
{
  id: ID! @join__field(graph: CUSTOMERS)
  title: String @join__field(graph: CUSTOMERS)
  workorders: [Workorder] @join__field(graph: WORKORDERS)
}

type Mutation {
  addCustomer(title: String): Customer @join__field(graph: CUSTOMERS)
  addWorkorder(customerId: String, title: String): Workorder @join__field(graph: WORKORDERS)
  addWorkorderStatus(status: WorkorderStatusInput): WorkorderStatus @join__field(graph: WORKORDER_STATUSES)
  addWorkorderStatuses(statuses: [WorkorderStatusInput]): WorkorderStatus @join__field(graph: WORKORDER_STATUSES)
}

type Query {
  customers: [Customer] @join__field(graph: CUSTOMERS)
  workorderStatuses: [WorkorderStatus] @join__field(graph: WORKORDER_STATUSES)
  workorders(customerId: String): [Workorder] @join__field(graph: WORKORDERS)
}

type Workorder
@join__owner(graph: WORKORDERS)
@join__type(graph: WORKORDERS, key: "id customerId workorderStatusId")
{
  customer: Customer @join__field(graph: WORKORDERS)
  customerId: String @join__field(graph: WORKORDERS)
  id: ID! @join__field(graph: WORKORDERS)
  status: WorkorderStatus @join__field(graph: WORKORDERS)
  title: String @join__field(graph: WORKORDERS)
  workorderStatusId: String @join__field(graph: WORKORDERS)
}

type WorkorderStatus
@join__owner(graph: WORKORDER_STATUSES)
@join__type(graph: WORKORDER_STATUSES, key: "id")
@join__type(graph: WORKORDERS, key: "id")
{
  description: String @join__field(graph: WORKORDER_STATUSES)
  id: ID! @join__field(graph: WORKORDER_STATUSES)
  status: String @join__field(graph: WORKORDER_STATUSES)
  workorders: [Workorder] @join__field(graph: WORKORDERS)
}

input WorkorderStatusInput {
  description: String
  status: String
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  CUSTOMERS @join__graph(name: "customers" url: "http://customer-srv:4002")
  WORKORDERS @join__graph(name: "workorders" url: "http://workorder-srv:4000")
  WORKORDER_STATUSES @join__graph(name: "workorder-statuses" url: "http://workorder-status-srv:4001")
}
